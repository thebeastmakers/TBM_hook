#-
# ==========================================================================
# Copyright (C) 1995 - 2006 The Beast Makers, Inc. and/or its licensors.  All 
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related 
# material (collectively the "Data") in these files contain unpublished 
# information proprietary to The Beast Makers, Inc. ("The Beast Makers") and/or its 
# licensors, which is protected by U.S. and French copyright 
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right 
# to use, modify, and incorporate this Data into other products for 
# purposes authorized by the The Beast Makers software license agreement, 
# without fee.
#
# The copyright notices in the Software and this entire statement, 
# including the above license grant, this restriction and the 
# following disclaimer, must be included in all copies of the 
# Software, in whole or in part, and all derivative works of 
# the Software, unless such copies or derivative works are solely 
# in the form of machine-executable object code generated by a 
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
# The Beast Makers DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
# TRADE PRACTICE. IN NO EVENT WILL The Beast Makers AND/OR ITS LICENSORS 
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF The Beast Makers 
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

#
# The Beast Makers Script File
# MODIFY THIS AT YOUR OWN RISK
#
# Creation Date:   27 02 2023
#

########################################################################
# DESCRIPTION:
#
#
########################################################################

import math, sys

import maya.OpenMaya as OpenMaya
import maya.OpenMayaMPx as OpenMayaMPx

kPluginNodeTypeName = "TBM_hook"
kPluginNodeId = OpenMaya.MTypeId(0x00132748)


# Node definition
class TBM_Hook(OpenMayaMPx.MPxNode):
	# class variables
	aTarget = OpenMaya.MObject()
	aInputAdaptMatrices = OpenMaya.MObject()
	aOutputHookMatrix = OpenMaya.MObject()
	
	def __init__(self):
		OpenMayaMPx.MPxNode.__init__(self)

	def compute(self, plug, data):
		# Check that the requested recompute is one of the output values
		if (plug == TBM_Hook.aOutputHookMatrix):
			# Read the input values
			adaptMatArray = data.inputArrayValue(TBM_Hook.aInputAdaptMatrices)
			matrix = data.inputValue(self.aTarget).asMatrix()
			# Store them on the output plugs
			matrixHandle = data.outputValue(TBM_Hook.aOutputHookMatrix)
			matrixHandle.setMMatrix(matrix)
			data.setClean(plug)
		else:
			return OpenMaya.kUnknownParameter
		return None


# creator
def nodeCreator():
	return OpenMayaMPx.asMPxPtr( TBM_Hook() )


# initializer
def nodeInitializer():
	matrixAttr = OpenMaya.MFnMatrixAttribute()
	typedAttr = OpenMaya.MFnMessageAttribute()

	# Setup the input attributes
	TBM_Hook.aInputAdaptMatrices = matrixAttr.create("inputAdaptMatrices", "inam")
	matrixAttr.setArray(True)
	matrixAttr.setStorable(True)
	matrixAttr.setWritable(True)

	TBM_Hook.aTarget = matrixAttr.create("target", "tgt")
	matrixAttr.setStorable(True)
	matrixAttr.setWritable(True)


	# Setup the output attributes
	TBM_Hook.aOutputHookMatrix = matrixAttr.create("outputHookMatrix", "okm")
	matrixAttr.setWritable(True)
	matrixAttr.setStorable(True)

	# Add the attributes to the node
	TBM_Hook.addAttribute(TBM_Hook.aInputAdaptMatrices)
	TBM_Hook.addAttribute(TBM_Hook.aTarget)
	TBM_Hook.addAttribute(TBM_Hook.aOutputHookMatrix)

	# Set the attribute dependencies
	#TBM_Hook.attributeAffects(TBM_Hook.aTarget, TBM_Hook.aOutputHookMatrix)
	TBM_Hook.attributeAffects(TBM_Hook.aInputAdaptMatrices, TBM_Hook.aOutputHookMatrix)



# initialize the script plug-in
def initializePlugin(mobject):
	mplugin = OpenMayaMPx.MFnPlugin(mobject, "The Beast Makers", "1.0", "Any")
	try:
		mplugin.registerNode( kPluginNodeTypeName, kPluginNodeId, nodeCreator, nodeInitializer )
	except:
		sys.stderr.write( "Failed to register node: %s" % kPluginNodeTypeName )
		raise


# uninitialize the script plug-in
def uninitializePlugin(mobject):
	mplugin = OpenMayaMPx.MFnPlugin(mobject)
	try:
		mplugin.deregisterNode( kPluginNodeId )
	except:
		sys.stderr.write( "Failed to deregister node: %s" % kPluginNodeTypeName )
		raise

