#-
# ==========================================================================
# Copyright (C) 1995 - 2006 The Beast Makers, Inc. and/or its licensors.  All 
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related 
# material (collectively the "Data") in these files contain unpublished 
# information proprietary to The Beast Makers, Inc. ("The Beast Makers") and/or its 
# licensors, which is protected by U.S. and French copyright 
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right 
# to use, modify, and incorporate this Data into other products for 
# purposes authorized by the The Beast Makers software license agreement, 
# without fee.
#
# The copyright notices in the Software and this entire statement, 
# including the above license grant, this restriction and the 
# following disclaimer, must be included in all copies of the 
# Software, in whole or in part, and all derivative works of 
# the Software, unless such copies or derivative works are solely 
# in the form of machine-executable object code generated by a 
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
# The Beast Makers DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
# TRADE PRACTICE. IN NO EVENT WILL The Beast Makers AND/OR ITS LICENSORS 
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF The Beast Makers 
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

#
# The Beast Makers Script File
# MODIFY THIS AT YOUR OWN RISK
#
# Creation Date:   27 02 2023
#

########################################################################
# DESCRIPTION:
#
#
########################################################################

import math, sys

import maya.OpenMaya as OpenMaya
import maya.OpenMayaMPx as OpenMayaMPx

kPluginNodeTypeName = "TBM_hook"
kPluginNodeId = OpenMaya.MTypeId(0x00132748)


# Node definition
class TBM_Hook(OpenMayaMPx.MPxNode):
    # class variables
    m_hooks = OpenMaya.MObject()
    m_input_attributes = OpenMaya.MObject()
    aTarget = OpenMaya.MObject()
    aInputAdaptMatrices = OpenMaya.MObject()
    aOutputHookMatrix = OpenMaya.MObject()

    def __init__(self):
        OpenMayaMPx.MPxNode.__init__(self)
        
    @classmethod
    def creator(cls):
        return TBM_Hook()
    
    @classmethod
    def initialize(cls):
        compoundAttr = OpenMaya.MFnCompoundAttribute()
        matrixAttr = OpenMaya.MFnMatrixAttribute()
        msgAttr = OpenMaya.MFnMessageAttribute()

        # Setup the input attributes
        cls.aInputAdaptMatrices = matrixAttr.create("inputAdaptMatrices", "inam")
        matrixAttr.setArray(True)
        matrixAttr.setStorable(True)
        matrixAttr.setWritable(True)

        cls.aTarget = matrixAttr.create("target", "tgt")
        matrixAttr.setStorable(True)
        matrixAttr.setWritable(True)

        # Setup the output attributes
        cls.aOutputHookMatrix = matrixAttr.create("outputHookMatrix", "okm")
        matrixAttr.setWritable(True)
        matrixAttr.setStorable(True)

        cls.m_hooks = compoundAttr.create("hooks", "hook")
        compoundAttr.setArray(True)
        compoundAttr.addChild(cls.aTarget)
        compoundAttr.addChild(cls.aOutputHookMatrix)

        cls.m_input_attributes = msgAttr.create("inputAttributes", "ia")
        msgAttr.setArray(True)

        # add attributes
        cls.addAttribute(cls.m_hooks)
        cls.addAttribute(cls.aInputAdaptMatrices)
        cls.addAttribute(cls.m_input_attributes)

        # Set the attribute dependencies
        cls.attributeAffects(cls.aInputAdaptMatrices, cls.aOutputHookMatrix)
        cls.attributeAffects(cls.m_input_attributes, cls.aOutputHookMatrix)

    def compute(self, plug, data):
        # Check that the requested recompute is one of the output values
        if (plug == TBM_Hook.aOutputHookMatrix):
            # Read the input values
            adaptMatArray = data.inputArrayValue(TBM_Hook.aInputAdaptMatrices)
            matrix = data.inputValue(self.aTarget).asMatrix()
            # Store them on the output plugs
            matrixHandle = data.outputValue(TBM_Hook.aOutputHookMatrix)
            matrixHandle.setMMatrix(matrix)
            data.setClean(plug)
        else:
            return OpenMaya.kUnknownParameter
        return None

# initialize the script plug-in
def initializePlugin(mobject):
	mplugin = OpenMayaMPx.MFnPlugin(mobject, "The Beast Makers", "1.0", "Any")
	try:
		mplugin.registerNode( kPluginNodeTypeName, kPluginNodeId, TBM_Hook.creator, TBM_Hook.initialize )
	except:
		sys.stderr.write( "Failed to register node: %s" % kPluginNodeTypeName )
		raise


# uninitialize the script plug-in
def uninitializePlugin(mobject):
	mplugin = OpenMayaMPx.MFnPlugin(mobject)
	try:
		mplugin.deregisterNode( kPluginNodeId )
	except:
		sys.stderr.write( "Failed to deregister node: %s" % kPluginNodeTypeName )
		raise

